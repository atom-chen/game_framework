{
  "code": "import { GoodsType, SkinState } from \"../games/CommonDefine\";\r\nimport ConfigManager from \"../games/ConfigManager\";\r\nimport GameLogicProcessingManager from \"../games/GameLogicProcessingManager\";\r\nimport GameEvent from \"../games/GameEvent\";\r\nimport { GameData } from \"./GameData\";\r\nvar PlayerDataBase = (function () {\r\n    function PlayerDataBase() {\r\n        this.inviteId = [];\r\n        this.nMaxLevel = 0;\r\n        this.nCurLevel = 0;\r\n        this.nCurIndex = 0;\r\n        this.nSignTimeLast = 0;\r\n        this.nSignIndex = 0;\r\n        this.nGlodCount = 0;\r\n        this.nPS = 5;\r\n        this.nPsTime = 0;\r\n    }\r\n    return PlayerDataBase;\r\n}());\r\nexport { PlayerDataBase };\r\nvar DYLogData = (function () {\r\n    function DYLogData() {\r\n        this.aryIndex = [];\r\n    }\r\n    return DYLogData;\r\n}());\r\nvar NewOperData = (function () {\r\n    function NewOperData() {\r\n        this.nMaxLevelNew = 0;\r\n        this.nLastMaxLevel = 0;\r\n    }\r\n    return NewOperData;\r\n}());\r\nvar NewFuncPsLimitless = (function () {\r\n    function NewFuncPsLimitless() {\r\n        this.nRefreshTime = 0;\r\n        this.nCurTime = 0;\r\n        this.nMaxTime = 5;\r\n    }\r\n    return NewFuncPsLimitless;\r\n}());\r\nvar OperData0807 = (function () {\r\n    function OperData0807() {\r\n        this.bSpecial = false;\r\n    }\r\n    return OperData0807;\r\n}());\r\nvar PlayerDataManager = (function () {\r\n    function PlayerDataManager() {\r\n        this.nMaxLevelCount = 30;\r\n        this.stPlayerDataBase = new PlayerDataBase();\r\n        this.stDYLogData = new DYLogData();\r\n        this.stNewOperData = new NewOperData();\r\n        this.stNewFuncPsLimitless = new NewFuncPsLimitless();\r\n        this.nPsRecoveryTime = 0;\r\n        this.nPsTimeCountDown = 0;\r\n        this.strUpDownTime = \"\";\r\n        this.bIsNewPlayer = false;\r\n        this.bPlayerLoadFinish = false;\r\n        this.bResLoadFinish = false;\r\n        this.stOperData0807 = new OperData0807();\r\n        this.ttMiniGameArraignmentSpecialOper();\r\n    }\r\n    PlayerDataManager.getInstance = function () {\r\n        if (!this.instance) {\r\n            this.instance = new PlayerDataManager();\r\n        }\r\n        return this.instance;\r\n    };\r\n    PlayerDataManager.prototype.addLevel = function () {\r\n        this.stPlayerDataBase.nCurLevel += 1;\r\n        if (this.stNewOperData.nMaxLevelNew < this.stPlayerDataBase.nCurLevel) {\r\n            this.stNewOperData.nMaxLevelNew = this.stPlayerDataBase.nCurLevel;\r\n            this.stNewOperData.nMaxLevelNew = this.stNewOperData.nMaxLevelNew >= this.nMaxLevelCount ? this.nMaxLevelCount : this.stNewOperData.nMaxLevelNew;\r\n        }\r\n        this.stPlayerDataBase.nCurLevel = this.stPlayerDataBase.nCurLevel < this.nMaxLevelCount ? this.stPlayerDataBase.nCurLevel : this.nMaxLevelCount - 1;\r\n        if (this.stPlayerDataBase.nMaxLevel < this.stPlayerDataBase.nCurLevel) {\r\n            this.stPlayerDataBase.nMaxLevel = this.stPlayerDataBase.nCurLevel;\r\n        }\r\n        this.SaveData();\r\n    };\r\n    PlayerDataManager.prototype.getCurLevel = function () {\r\n        return this.stPlayerDataBase.nCurLevel;\r\n    };\r\n    PlayerDataManager.prototype.getCurLevelMax = function () {\r\n        return this.stPlayerDataBase.nMaxLevel;\r\n    };\r\n    PlayerDataManager.prototype.setCurLevel = function (nLevel) {\r\n        this.stPlayerDataBase.nCurLevel = nLevel;\r\n        this.SaveData();\r\n    };\r\n    PlayerDataManager.prototype.getCurLevelToChallenge = function () {\r\n        var nRealData = this.stPlayerDataBase.nCurLevel + 1;\r\n        if (nRealData > this.nMaxLevelCount) {\r\n            nRealData = this.nMaxLevelCount;\r\n        }\r\n        if (this.allCustomsClearance()) {\r\n            nRealData = Utils.random(1, this.nMaxLevelCount);\r\n        }\r\n        return nRealData;\r\n    };\r\n    PlayerDataManager.prototype.getLevelToChangeMaxLevel = function () {\r\n        var nRealData = this.stPlayerDataBase.nMaxLevel + 1;\r\n        if (nRealData > this.nMaxLevelCount) {\r\n            nRealData = this.nMaxLevelCount;\r\n        }\r\n        if (this.allCustomsClearance()) {\r\n            nRealData = this.stPlayerDataBase.nCurLevel + 1;\r\n            if (nRealData > this.nMaxLevelCount) {\r\n                nRealData = this.nMaxLevelCount;\r\n            }\r\n        }\r\n        return nRealData;\r\n    };\r\n    PlayerDataManager.prototype.getLevelToChangeMaxLevelForLevelView = function () {\r\n        var nRealData = this.stPlayerDataBase.nMaxLevel + 1;\r\n        if (nRealData > this.nMaxLevelCount) {\r\n            nRealData = this.nMaxLevelCount;\r\n        }\r\n        return nRealData;\r\n    };\r\n    PlayerDataManager.prototype.SaveData = function () {\r\n        var str = JSON.stringify(this.stPlayerDataBase);\r\n        Laya.LocalStorage.setItem(GameData.getInstance().userInfo.openId + \"BaseData\", str);\r\n        str = JSON.stringify(this.stNewOperData);\r\n        Laya.LocalStorage.setItem(GameData.getInstance().userInfo.openId + \"task20200611\", str);\r\n        str = JSON.stringify(this.stNewFuncPsLimitless);\r\n        Laya.LocalStorage.setItem(GameData.getInstance().userInfo.openId + \"NewFuncPsLimitless\", str);\r\n        var strNewOper0807 = JSON.stringify(this.stOperData0807);\r\n        Laya.LocalStorage.setItem(\"OperData0807\" + GameData.getInstance().userInfo.openId, strNewOper0807);\r\n    };\r\n    PlayerDataManager.prototype.GetData = function () {\r\n        var str = Laya.LocalStorage.getItem(GameData.getInstance().userInfo.openId + \"BaseData\");\r\n        if (str) {\r\n            try {\r\n                this.stPlayerDataBase = JSON.parse(str);\r\n                this.bIsNewPlayer = false;\r\n            }\r\n            catch (e) {\r\n                console.log(\"error player data : \", e);\r\n                this.bIsNewPlayer = true;\r\n                this.stPlayerDataBase = new PlayerDataBase();\r\n            }\r\n        }\r\n        else {\r\n            this.bIsNewPlayer = true;\r\n        }\r\n        str = Laya.LocalStorage.getItem(GameData.getInstance().userInfo.openId + \"task20200611\");\r\n        if (str) {\r\n            try {\r\n                this.stNewOperData = JSON.parse(str);\r\n            }\r\n            catch (e) {\r\n                console.log(\"error player data : \", e);\r\n                this.stNewOperData = new NewOperData();\r\n            }\r\n        }\r\n        var strOperData0807 = Laya.LocalStorage.getItem(\"OperData0807\" + GameData.getInstance().userInfo.openId);\r\n        if (strOperData0807) {\r\n            this.stOperData0807 = JSON.parse(strOperData0807);\r\n        }\r\n        else {\r\n            this.stOperData0807 = new OperData0807();\r\n        }\r\n        str = Laya.LocalStorage.getItem(GameData.getInstance().userInfo.openId + \"NewFuncPsLimitless\");\r\n        if (str) {\r\n            try {\r\n                this.stNewFuncPsLimitless = JSON.parse(str);\r\n            }\r\n            catch (e) {\r\n                console.log(\"error player data : \", e);\r\n                this.stNewFuncPsLimitless = new NewFuncPsLimitless();\r\n            }\r\n        }\r\n        if (this.stNewFuncPsLimitless.nRefreshTime == 0) {\r\n            this.stNewFuncPsLimitless.nRefreshTime = new Date().getTime();\r\n        }\r\n        var nCurTime = new Date().getTime();\r\n        if (!Utils.judgeIsOnTheSameDay(this.stNewFuncPsLimitless.nRefreshTime, nCurTime)) {\r\n            this.stNewFuncPsLimitless.nCurTime = 0;\r\n            this.stNewFuncPsLimitless.nRefreshTime = nCurTime;\r\n        }\r\n        if (this.stNewOperData.nMaxLevelNew == 0) {\r\n            this.stNewOperData.nMaxLevelNew = this.stPlayerDataBase.nMaxLevel;\r\n        }\r\n        if (this.stNewOperData.nLastMaxLevel == 0) {\r\n            this.stNewOperData.nLastMaxLevel = this.nMaxLevelCount;\r\n        }\r\n        if (this.stNewOperData.nLastMaxLevel < this.nMaxLevelCount && (this.stPlayerDataBase.nMaxLevel + 1) == this.stNewOperData.nMaxLevelNew) {\r\n            this.stPlayerDataBase.nMaxLevel += 1;\r\n            this.stNewOperData.nLastMaxLevel = this.nMaxLevelCount;\r\n        }\r\n        if (BaseConst.infos.gameInfo.openalllevel && BaseConst.infos.gameInfo.openalllevel == 1) {\r\n            this.stPlayerDataBase.nCurLevel = this.nMaxLevelCount - 1;\r\n            this.stPlayerDataBase.nMaxLevel = this.nMaxLevelCount - 1;\r\n            this.bIsNewPlayer = false;\r\n        }\r\n        EventMgr.getInstance().sendEvent(GameEvent.ON_GLOD_CHANGE);\r\n        EventMgr.getInstance().sendEvent(GameEvent.ON_PS_CHANGE);\r\n        this.bPlayerLoadFinish = true;\r\n        if (this.bResLoadFinish && BaseConst.infos.gameInfo.isDY) {\r\n            EventMgr.getInstance().sendEvent(GameEvent.HAS_GET_PLAYER_DATA);\r\n        }\r\n        if (this.stNewFuncPsLimitless.nCurTime == this.stNewFuncPsLimitless.nMaxTime) {\r\n            EventMgr.getInstance().sendEvent(GameEvent.PS_LIMITLESS);\r\n        }\r\n    };\r\n    PlayerDataManager.prototype.AddGoods = function (nType, nCount) {\r\n        if (nType == GoodsType.enum_GoodsType_Glod) {\r\n            this.stPlayerDataBase.nGlodCount += nCount;\r\n            EventMgr.getInstance().sendEvent(GameEvent.ON_GLOD_CHANGE);\r\n        }\r\n        else if (nType == GoodsType.enum_GoodsType_Sp) {\r\n            this.stPlayerDataBase.nPS += nCount;\r\n            var nMax = 99;\r\n            var stGameConfig = ConfigManager.getInstance().getGameConfigDataByID(4);\r\n            if (stGameConfig) {\r\n                nMax = parseInt(stGameConfig.strValue);\r\n            }\r\n            if (this.stPlayerDataBase.nPS > nMax) {\r\n                TipsManager.getInstance().showDefaultTips(\"体力已满\");\r\n                this.stPlayerDataBase.nPS = nMax;\r\n            }\r\n            EventMgr.getInstance().sendEvent(GameEvent.ON_PS_CHANGE);\r\n            this.openPSRecoveryTime();\r\n        }\r\n        this.SaveData();\r\n    };\r\n    PlayerDataManager.prototype.CheckGoods = function (nType, nCount) {\r\n        if (nType == GoodsType.enum_GoodsType_Glod) {\r\n            return this.stPlayerDataBase.nGlodCount >= nCount;\r\n        }\r\n        else if (nType == GoodsType.enum_GoodsType_Sp) {\r\n            if (this.isPsLimitlessState()) {\r\n                return true;\r\n            }\r\n            return this.stPlayerDataBase.nPS >= nCount;\r\n        }\r\n    };\r\n    PlayerDataManager.prototype.subGoods = function (nType, nCount) {\r\n        if (nType == GoodsType.enum_GoodsType_Glod) {\r\n            this.stPlayerDataBase.nGlodCount -= nCount;\r\n            this.stPlayerDataBase.nGlodCount = this.stPlayerDataBase.nGlodCount < 0 ? 0 : this.stPlayerDataBase.nGlodCount;\r\n            EventMgr.getInstance().sendEvent(GameEvent.ON_GLOD_CHANGE);\r\n        }\r\n        else if (nType == GoodsType.enum_GoodsType_Sp) {\r\n            if (this.isPsLimitlessState()) {\r\n                return;\r\n            }\r\n            this.stPlayerDataBase.nPS -= nCount;\r\n            this.stPlayerDataBase.nPS = this.stPlayerDataBase.nPS < 0 ? 0 : this.stPlayerDataBase.nPS;\r\n            EventMgr.getInstance().sendEvent(GameEvent.ON_PS_CHANGE);\r\n            this.openPSRecoveryTime();\r\n        }\r\n        this.SaveData();\r\n    };\r\n    PlayerDataManager.prototype.getSpLastTime = function () {\r\n        return this.strUpDownTime;\r\n    };\r\n    PlayerDataManager.prototype.refreshOffLinePS = function () {\r\n        this.addPsAboutOffLine();\r\n        this.openPSRecoveryTime();\r\n    };\r\n    PlayerDataManager.prototype.addPsAboutOffLine = function () {\r\n        if (this.stPlayerDataBase.nPsTime == 0) {\r\n            return;\r\n        }\r\n        var nMaxPs = 10;\r\n        var stGameConfig = ConfigManager.getInstance().getGameConfigDataByID(1);\r\n        if (stGameConfig) {\r\n            nMaxPs = parseInt(stGameConfig.strValue);\r\n        }\r\n        if (this.stPlayerDataBase.nPS >= nMaxPs) {\r\n            return;\r\n        }\r\n        stGameConfig = ConfigManager.getInstance().getGameConfigDataByID(2);\r\n        if (stGameConfig) {\r\n            var nAddPsPerTime = parseInt(stGameConfig.strValue);\r\n            if (nAddPsPerTime == 0) {\r\n                return;\r\n            }\r\n            var nCurtTime = GameLogicProcessingManager.GetCurTime();\r\n            var nTimeOverFlow = nCurtTime - this.stPlayerDataBase.nPsTime;\r\n            var nPsAdd = Math.floor(nTimeOverFlow / nAddPsPerTime);\r\n            this.stPlayerDataBase.nPS += nPsAdd;\r\n            nTimeOverFlow = nTimeOverFlow % nAddPsPerTime;\r\n            this.stPlayerDataBase.nPsTime = nCurtTime - nTimeOverFlow;\r\n            if (this.stPlayerDataBase.nPS >= nMaxPs) {\r\n                this.stPlayerDataBase.nPS = nMaxPs;\r\n                this.stPlayerDataBase.nPsTime = 0;\r\n            }\r\n            this.SaveData();\r\n        }\r\n    };\r\n    PlayerDataManager.prototype.openPSRecoveryTime = function () {\r\n        if (this.nPsRecoveryTime == 0) {\r\n            var stGameConfig_1 = ConfigManager.getInstance().getGameConfigDataByID(2);\r\n            if (!stGameConfig_1) {\r\n                return;\r\n            }\r\n            this.nPsRecoveryTime = parseInt(stGameConfig_1.strValue);\r\n        }\r\n        var nMaxPs = 10;\r\n        var stGameConfig = ConfigManager.getInstance().getGameConfigDataByID(1);\r\n        if (stGameConfig) {\r\n            nMaxPs = parseInt(stGameConfig.strValue);\r\n        }\r\n        if (this.stPlayerDataBase.nPS >= nMaxPs) {\r\n            Laya.timer.clear(this, this.subTimeAndRefreshPsRecoveryTimeView);\r\n            this.stPlayerDataBase.nPsTime = 0;\r\n            GameLogicProcessingManager.getInstance().PSRecoveryOpen = false;\r\n        }\r\n        else {\r\n            if (!GameLogicProcessingManager.getInstance().PSRecoveryOpen) {\r\n                GameLogicProcessingManager.getInstance().PSRecoveryOpen = true;\r\n                var nCurTime = GameLogicProcessingManager.GetCurTime();\r\n                if (this.stPlayerDataBase.nPsTime == 0) {\r\n                    this.stPlayerDataBase.nPsTime = nCurTime;\r\n                }\r\n                this.nPsTimeCountDown = this.nPsRecoveryTime - (nCurTime - this.stPlayerDataBase.nPsTime);\r\n                this.refreshPsRecoveryTimeView(this.nPsTimeCountDown);\r\n                Laya.timer.loop(1000, this, this.subTimeAndRefreshPsRecoveryTimeView);\r\n                this.SaveData();\r\n            }\r\n        }\r\n    };\r\n    PlayerDataManager.prototype.subTimeAndRefreshPsRecoveryTimeView = function () {\r\n        if (!GameLogicProcessingManager.getInstance().PSRecoveryOpen) {\r\n            return;\r\n        }\r\n        if (PlayerDataManager.nTimeHidSec != 0) {\r\n            PlayerDataManager.nTimeHidSec = PlayerDataManager.nTimeHidSec - PlayerDataManager.nTimeHidSec % 1000;\r\n        }\r\n        this.nPsTimeCountDown -= 1000 + PlayerDataManager.nTimeHidSec;\r\n        PlayerDataManager.nTimeHidSec = 0;\r\n        this.refreshPsRecoveryTimeView(this.nPsTimeCountDown);\r\n    };\r\n    PlayerDataManager.prototype.refreshPsRecoveryTimeView = function (nTime) {\r\n        var nLastTime = nTime;\r\n        nLastTime = nLastTime < 0 ? 0 : nLastTime;\r\n        nLastTime = Math.floor(nLastTime / 1000);\r\n        var nMinTotal = Math.floor(nLastTime / 60);\r\n        var nMinTen = Math.floor(nMinTotal / 10);\r\n        var nMinBit = nMinTotal % 10;\r\n        var nSecTotal = nLastTime % 60;\r\n        var nSecTen = Math.floor(nSecTotal / 10);\r\n        var nSecBit = nSecTotal % 10;\r\n        this.strUpDownTime = nMinTen.toString() + nMinTotal.toString() + \":\" + nSecTen.toString() + nSecBit.toString();\r\n        EventMgr.getInstance().sendEvent(GameEvent.ON_SP_UPDOWN_TIME);\r\n        if (nTime < 0) {\r\n            this.nPsTimeCountDown = 0;\r\n            GameLogicProcessingManager.getInstance().PSRecoveryOpen = false;\r\n            this.stPlayerDataBase.nPsTime = 0;\r\n            Laya.timer.clear(this, this.refreshPsRecoveryTimeView);\r\n            this.AddGoods(GoodsType.enum_GoodsType_Sp, 1);\r\n            return;\r\n        }\r\n    };\r\n    PlayerDataManager.prototype.getLevelNumMakeOver = function () {\r\n        return this.nMaxLevelCount;\r\n    };\r\n    PlayerDataManager.prototype.initGoods = function () {\r\n        if (!this.bIsNewPlayer) {\r\n            return;\r\n        }\r\n        var stGameConfig = ConfigManager.getInstance().getGameConfigDataByID(15);\r\n        if (stGameConfig) {\r\n            this.stPlayerDataBase.nPS = parseInt(stGameConfig.strValue);\r\n        }\r\n        stGameConfig = ConfigManager.getInstance().getGameConfigDataByID(16);\r\n        if (stGameConfig) {\r\n            this.stPlayerDataBase.nGlodCount = parseInt(stGameConfig.strValue);\r\n        }\r\n    };\r\n    PlayerDataManager.prototype.isSign = function () {\r\n        var nCurTime = GameLogicProcessingManager.GetCurTime();\r\n        if (Utils.judgeIsOnTheSameDay(PlayerDataManager.getInstance().stPlayerDataBase.nSignTimeLast, nCurTime)) {\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    };\r\n    PlayerDataManager.prototype.checkSkinState = function (nSkinID) {\r\n        var nState = SkinState.enum_SkinState_NotOwned;\r\n        if (nSkinID == 1) {\r\n            nState = SkinState.enum_SkinState_Have;\r\n        }\r\n        else if (nSkinID == 2) {\r\n            nState = SkinState.enum_SkinState_NotOwned;\r\n        }\r\n        return nState;\r\n    };\r\n    PlayerDataManager.prototype.recordDyLogIndex = function (nIndex) {\r\n        this.stDYLogData.aryIndex.push(nIndex);\r\n    };\r\n    PlayerDataManager.prototype.checkDyLogIndexrecorded = function (nIndex) {\r\n        for (var i = 0; i < this.stDYLogData.aryIndex.length; ++i) {\r\n            if (nIndex == this.stDYLogData.aryIndex[i]) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    PlayerDataManager.prototype.ttMiniGameArraignmentSpecialOper = function () {\r\n        if (DeviceUtil.isTTMiniGame() && BaseConst.infos.gameInfo.openPsAward == 0) {\r\n            this.nMaxLevelCount = this.nMaxLevelCount - 1;\r\n        }\r\n    };\r\n    PlayerDataManager.prototype.allCustomsClearance = function () {\r\n        return this.stNewOperData.nMaxLevelNew == PlayerDataManager.getInstance().nMaxLevelCount;\r\n    };\r\n    PlayerDataManager.prototype.addWatchVideoAddSpTime = function () {\r\n        this.stNewFuncPsLimitless.nCurTime += 1;\r\n        this.stNewFuncPsLimitless.nCurTime = this.stNewFuncPsLimitless.nCurTime > this.stNewFuncPsLimitless.nMaxTime ? this.stNewFuncPsLimitless.nMaxTime : this.stNewFuncPsLimitless.nCurTime;\r\n        if (this.stNewFuncPsLimitless.nCurTime == this.stNewFuncPsLimitless.nMaxTime) {\r\n            EventMgr.getInstance().sendEvent(GameEvent.PS_LIMITLESS);\r\n        }\r\n        this.SaveData();\r\n    };\r\n    PlayerDataManager.prototype.isPsLimitlessState = function () {\r\n        return this.stNewFuncPsLimitless.nCurTime >= this.stNewFuncPsLimitless.nMaxTime;\r\n    };\r\n    PlayerDataManager.prototype.getPsLimitlessStateLastTime = function () {\r\n        return this.stNewFuncPsLimitless.nMaxTime - this.stNewFuncPsLimitless.nCurTime;\r\n    };\r\n    Object.defineProperty(PlayerDataManager.prototype, \"pNewFuncPsLimitless\", {\r\n        get: function () {\r\n            return this.stNewFuncPsLimitless;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    PlayerDataManager.prototype.checkIsSpecial = function () {\r\n        return this.stOperData0807.bSpecial;\r\n    };\r\n    PlayerDataManager.bGlobEnterGame = false;\r\n    PlayerDataManager.nTimeHidSec = 0;\r\n    PlayerDataManager.nHidTime = 0;\r\n    return PlayerDataManager;\r\n}());\r\nexport { PlayerDataManager };\r\n",
  "references": [
    "F:/gitpro/ecy_game_framework/game_framework_ecy/game_framework_ecy/src/script/games/CommonDefine.ts",
    "F:/gitpro/ecy_game_framework/game_framework_ecy/game_framework_ecy/src/script/games/ConfigManager.ts",
    "F:/gitpro/ecy_game_framework/game_framework_ecy/game_framework_ecy/src/script/games/GameLogicProcessingManager.ts",
    "F:/gitpro/ecy_game_framework/game_framework_ecy/game_framework_ecy/src/script/games/GameEvent.ts",
    "F:/gitpro/ecy_game_framework/game_framework_ecy/game_framework_ecy/src/script/common/GameData.ts",
    "F:/gitpro/ecy_game_framework/game_framework_ecy/game_framework_ecy/src/script/games/ViewChangeManager.ts"
  ]
}
